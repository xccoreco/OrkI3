set Pointer <- 0;
set Tokens <- make Token array(0);

function Lex()
{
    while (!EOF())
    {
        var p <- Pointer;

        //whitespaces
        if (Current() = " ") { Tokens->Push(make Token("whitespace", Current(), Pointer)); Step(1); continue; }
        if (Current() = Char(10)) { Tokens->Push(make Token("whitespace", Current(), Pointer)); Step(1); continue; }
        if (Current() = Char(13)) { Tokens->Push(make Token("whitespace", Current(), Pointer)); Step(1); continue; }

        //opertators
        if (Current() = "+") { Tokens->Push(make Token("plus", Current(), Pointer)); Step(1); continue; }
        if (Current() = "-") { Tokens->Push(make Token("minus", Current(), Pointer)); Step(1); continue; }
        if (Current() = "/") { Tokens->Push(make Token("divide", Current(), Pointer)); Step(1); continue; }
        if (Current() = "*") { Tokens->Push(make Token("multiply", Current(), Pointer)); Step(1); continue; }

        //colons
        if (Current() = ":") { Tokens->Push(make Token("colon", Current(), Pointer)); Step(1); continue; }
        if (Current() = ";") { Tokens->Push(make Token("semicolon", Current(), Pointer)); Step(1); continue; }
        if (Current() = ",") { Tokens->Push(make Token("comma", Current(), Pointer)); Step(1); continue; }

        //brackets
        if (Current() = "(") { Tokens->Push(make Token("openparenthesis", Current(), Pointer)); Step(1); continue; }
        if (Current() = ")") { Tokens->Push(make Token("closeparenthesis", Current(), Pointer)); Step(1); continue; }
        if (Current() = "{") { Tokens->Push(make Token("openbrace", Current(), Pointer)); Step(1); continue; }
        if (Current() = "}") { Tokens->Push(make Token("closebrace", Current(), Pointer)); Step(1); continue; }
        if (Current() = "[") { Tokens->Push(make Token("openbracket", Current(), Pointer)); Step(1); continue; }
        if (Current() = "]") { Tokens->Push(make Token("closebracket", Current(), Pointer)); Step(1); continue; }

        //strings
        if (Current() = Char(34)) { Tokens->Push(make Token("string", LexString(), p)); continue; }

        //keywords
        if (isLetter(Current())) { var kw <- LexKeyword(); Tokens->Push(make Token(IdentifyKeyword(kw), kw, p)); continue; }

        //numbers
        if (isDigit(Current())) { Tokens->Push(make Token("int", LexNumber(), p)); continue; }

        //comments
        if (Current() = "#") { Tokens->Push(make Token("comment", LexComment(), p)); Step(1); continue; }

        Print("[!] Unkown Symbol! Got: " + Current() + " [Line: " + string(GetLineNum(Pointer)) + "]");
        die(0);
    }
     Tokens->Push(make Token("EOF", "---", 0));
}

function LexString() string
{
    Step(1);
    var str <- "";

    while (Current() != Char(34))
    {
        if (EOF()) { Print("[!] Unterminated string literal!" + " [Line: " + string(GetLineNum(Pointer)) + "]"); die(0); }
        str <-+ Current();
        Step(1);
    }
    Step(1);
    return str;
}

function LexComment() string
{
    Step(1);

    while (Current() != Char(10))
    {
        Step(1);
        if (EOF()) return "";
    }
    return "";
}

function LexKeyword() string
{
    var str <- "";
    while (isLetter(Current()) && !EOF())
    {
        str <-+ Current();
        Step(1);
    }
    return str;
}

function IdentifyKeyword(kw string) string
{
    from (i <- 0) to Keywords->GetLength() - 1
        if (kw = (Keywords[i]))
            return (Keywords[i]) + "kw";
    return "identifier";
}

function LexNumber() string
{
    var str <- "";
    while (isDigit(Current()) && !EOF())
    {
        str <-+ Current();
        Step(1);
    }
    return str;
}

function Current() string { return Peek(0); }
function Peek(offset int) string { return Code->Substring(Pointer + offset, 1); }
function EOF() bool { return Pointer >= Code->GetLength(); }
function Step(amount int) { Pointer <-+ amount; }