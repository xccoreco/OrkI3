set FunctionSymbols <- make FunctionSymbol array(0);

function Bind()
{
    // registering all Functions
    from (i <- 0) to Statements->GetLength() -1
    {
        if (~Statements[i]->Name = "func")
        {
            FunctionSymbols->Push(CreateFunctionSymbol(~Statements[i]->Args));
        }
        else
        {
            Print("[!] Only Function Statements are allowed globally!");
            die(0);
        }
    }

    // binding all Functions
    from (i <- 0) to Statements->GetLength() -1
    {
        BindFunctionStatement(Statements[i]);
    }
}

function BindStatement(stmt Statement, fn FunctionSymbol) BoundStatement
{
    if (stmt->Name = "call")
        return BindCallStatement(stmt, fn);
    //if (stmt->Name = "return")
        //return BindReturnStatement(stmt, fn);
    Print("[!] Expecting Statement, got: " + stmt->Name);
    die(0);
    return make BoundStatement("", make any array(0), "", "void");
}

function BindExpression(ex Expression, fn FunctionSymbol) BoundExpression
{
    if (ex->Type = "string")
        return make BoundExpression("string", ex->Value, BoundExpression(nil), BoundExpression(nil), "string");
    if (ex->Type = "int")
        return make BoundExpression("int", ex->Value, BoundExpression(nil), BoundExpression(nil), "int");
    if (ex->Type = "bool")
        return make BoundExpression("bool", ex->Value, BoundExpression(nil), BoundExpression(nil), "bool");
    if (ex->Type = "variable")
        return BindVariableExpression(ex, fn);

    Print("[!] Expecting Expression, got: " + ex->Type);
    die(0);
    return make BoundExpression("", "", BoundExpression(nil), BoundExpression(nil), "");
}

function BindVariableExpression(ex Expression, fn FunctionSymbol) BoundExpression
{
    var param <- fn->GetParamIndex(string(ex->Value));

    if (param = -1)
    {
        Print("Couldnt find Variable " + string(ex->Value) + "!");
        die(0);
        return make BoundExpression("", "", BoundExpression(nil), BoundExpression(nil), "");
    }

    var paramSym <- fn->GetParam(param);
    return make BoundExpression("parameter", paramSym, BoundExpression(nil), BoundExpression(nil), paramSym->Type);
}

function BindCallStatement(stmt Statement, fn FunctionSymbol) BoundStatement
{
    var stmtargs <- stmt->Args;
    var functionSymbol <- GetFunctionSymbol(~Token(stmtargs[0])->Value);
    var args <- Statement(stmtargs[1]);

    var amount <- functionSymbol->GetParamAmount();

    if (~args->Args->GetLength() != amount)
    {
        Print("[!] Wrong Number of Arguments! Function " + functionSymbol->Name + " expected " + string(amount) + " Args but got " + string(~args->Args->GetLength()) + "!");
        die(0);
    }

    var newArgs <- make any array(0);
    newArgs->Push(functionSymbol);

    var expargs <- args->Args;

    from (i <- 0) to expargs->GetLength() - 1
    {
        var bexp <- BindExpression(Expression(expargs[i]), fn);

        //check if the Datatypes of the given expression matches whats expected
        if (bexp->Type != ~functionSymbol->GetParam(i)->Type)
        {
            Print("[!] Function " + functionSymbol->Name + " expects a " + ~functionSymbol->GetParam(i)->Type + " as Argument Nr " + string(i) + ". (Got: " + bexp->Type + ")");
            die(0);
        }
        newArgs->Push(bexp);
    }

    return make BoundStatement("call", newArgs, "", functionSymbol->Type);
    //return make BoundStatement("call", make any array(0), "", "");
}

function BindFunctionStatement(stmt Statement)
{
    var args <- stmt->Args;
    var blockStatementArgs <- ~Statement(args[3])->Args;
    var func <- GetFunctionSymbol(~Token(args[0])->Value);
    var boundStatements <- make BoundStatement array(0);

    from (i <- 0) to blockStatementArgs->GetLength() -1
    {
        boundStatements->Push(BindStatement(Statement(blockStatementArgs[i]), func));
    }
}

function CreateFunctionSymbol(args anyArr) FunctionSymbol
{
    var name <- ~Token(args[0])->Value;
    var params <- make ParameterSymbol array(0);
    var ftype <- ~Token(args[2])->Value;
    var isMain <- false;

    if (ftype = "main") { isMain <- true; ftype <- "bool"; }

    var paramStatement <- Statement(args[1]);
    var paramArgs <- paramStatement->Args;
    for (var i <- 0; i < paramArgs->GetLength(); i <-+ 2)
    {
        params->Push(make ParameterSymbol(~Token(paramArgs[i])->Value, ~Token(paramArgs[i + 1])->Value));
    }

    return make FunctionSymbol(name, params, ftype, isMain);
}

function GetFunctionSymbol(name string) FunctionSymbol
{
    from (i <- 0) to FunctionSymbols->GetLength() -1
        if (~FunctionSymbols[i]->Name = name)
            return FunctionSymbols[i];
        
    Print("[!] Could not find Function " + name);
    die(0);
    return FunctionSymbols[0];
}

function FunctionExists(name string) bool
{
    from (i <- 0) to FunctionSymbols->GetLength() -1
        if (~FunctionSymbols[i]->Name = name) return true;

    return false;
}