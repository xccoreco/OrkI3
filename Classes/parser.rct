set Statements <- make Statement array(0);

function Parse()
{
    Pointer <- 0;
    while (~Cur()->Type != "EOF")
    {
        Skip();

        if (~Cur()->Type = "keyword")
        {
            if (~Cur()->Value = "print")
            {
                Statements->Push(ParsePrint());
            }
        }
        else if (~Cur()->Type = "EOF")
        {
            return;
        }
        else
        {
            Print("[!] Only functions are allowed globally! Got: " + ~Cur()->Type);
            die(0);
        }
    }
}

function ParseExpression() Token
{
    if (~Cur()->Type = "string") return Consume("string");
    if (~Cur()->Type = "number") return Consume("number");
    return make Token("nil", "");
}

function ParsePrint() Statement
{
    var printkw <- Consume("keyword");
    var args <- make any array(0);

    Consume("openparenthese");
    args->Push(ParseExpression());
    Consume("closeparenthese");
    Consume("semicolon");

    return make Statement(printkw->Value, args);
}

function Cur() Token { return Pek(0); }
function Pek(offset int) Token { return Tokens[Pointer + offset] }
function Skip() { while (~Cur()->Type = "whitespace" || ~Cur()->Type = "comment") { Step(1); } }
function Consume(name string) Token
{ 
    Skip();
    if (~Cur()->Type = name)
    {
        Step(1);
        return Pek(-1);
    }
    else
    {
        Print("[!] Exprected Token " + name + " but got: " + ~Cur()->Type);
        die(0);
    }
    return Token(nil);
}