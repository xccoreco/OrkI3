set Statements <- make Statement array(0);
set FunctionSymbols <- make FunctionSymbol array(0);

function Parse()
{
    Pointer <- 0;
    while (~Cur()->Type != "EOF")
    {
        Skip();

        if (~Cur()->Type = "funckw")
        {
            Statements->Push(ParseFunction());
        }
        else if (~Cur()->Type = "EOF")
        {
            return;
        }
        else
        {
            Print("[!] Only functions are allowed globally! Got: " + ~Cur()->Type + " [Line: " + string(GetLineNum(~Cur()->Pos)) + "]");
            die(0);
        }
    }
}

function ParseExpression() Expression
{
    Skip();
    if (~Cur()->Type = "string") return make Expression("string", ~Consume("string")->Value, Expression(nil), Expression(nil));
    if (~Cur()->Type = "int") return make Expression("int", int(~Consume("int")->Value), Expression(nil), Expression(nil));
    
    if (~Cur()->Type = "truekw") return make Expression("bool", ~Consume("truekw")->Value = "true", Expression(nil), Expression(nil));
    if (~Cur()->Type = "falsekw") return make Expression("bool", ~Consume("falsekw")->Value = "true", Expression(nil), Expression(nil));
    
    if (~Cur()->Type = "identifier") return make Expression("variable", ~Consume("identifier")->Value, Expression(nil), Expression(nil));
    return make Expression("nil", nil, Expression(nil), Expression(nil));
}

function ParseFunction() Statement
{
    var funckw <- Consume("funckw");
    var args <- make any array(0);
    var types <- "";

    args->Push(Consume("identifier")); types <-+ "t";
    Consume("openparenthesis");

    if (~Cur()->Type = "identifier")
    {
        args->Push(ParseParameters()); types <-+ "s";
    }
    else
    {
        args->Push(make Statement("params", make any array(0), "")); types <-+ "s";
    }


    Consume("closeparenthesis");
    Consume("colon");
    args->Push(Consume("identifier")); types <-+ "t";
    args->Push(ParseBlockStatement()); types <-+ "s";

    return make Statement(funckw->Value, args, types);
}

function ParseArguments() Statement
{
    var args <- make any array(0);
    var types <- "";

    while (true)
    {
        Skip();
        if (~Cur()->Type = "EOF") { Print("[!] Unterminated Parenthesis!" + " [Line: " + string(GetLineNum(~Cur()->Pos)) + "]"); die(0); }
        if (~Cur()->Type = "closeparenthesis") { break; }
        args->Push(ParseExpression()); types <-+ "e";

        Skip();

        if (~Cur()->Type != "closeparenthesis") Consume("comma");
    }

    return make Statement("args", args, types);
}

function ParseParameters() Statement
{
    var args <- make any array(0);
    var types <- "";

    while (true)
    {
        Skip();
        if (~Cur()->Type = "EOF") { Print("[!] Unterminated Parenthesis!" + " [Line: " + string(GetLineNum(~Cur()->Pos)) + "]"); die(0); }
        if (~Cur()->Type = "closeparenthesis") { break; }

        args->Push(Consume("identifier")); types <-+ "t";
        Consume("colon"); 
        args->Push(Consume("identifier")); types <-+ "t";

        Skip();

        if (~Cur()->Type != "closeparenthesis") Consume("comma");
    }

    return make Statement("params", args, types);
}

function ParseBlockStatement() Statement
{
    Consume("openbrace");
    var args <- make any array(0);
    var types <- "";

    while (true)  
    {
        Skip();

        if (~Cur()->Type = "EOF") { Print("[!] Unterminated CodeBlock!" + " [Line: " + string(GetLineNum(~Cur()->Pos)) + "]"); die(0); }  
        if (~Cur()->Type = "closebrace") { break; }  

        args->Push(ParseStatement()); types <-+ "s";
    }

    Consume("closebrace");

    return make Statement("block", args, types);
}

function ParseStatement() Statement
{
    Skip();
    if (~Cur()->Type = "identifier" && ~Pek(1)->Type = "openparenthesis")
        return ParseCall();
    else if (~Cur()->Type = "returnkw")
        return ParseReturn();

    Print("[!] Exprected Statement, got: " + ~Cur()->Type + " [Line: " + string(GetLineNum(~Cur()->Pos)) + "]");
    die(0);
    return make Statement("nil", make any array(0), "");
}

function ParseCall() Statement
{
    var args <- make any array(0);
    var types <- "";

    args->Push(Consume("identifier")); types <-+ "t";
    Consume("openparenthesis");
    args->Push(ParseArguments()); types <-+ "s";
    Consume("closeparenthesis");
    Consume("semicolon");

    return make Statement("call", args, types);
}

function ParseReturn() Statement
{
    var returnkw <- Consume("returnkw");
    var args <- make any array(0);
    var types <- "";

    args->Push(ParseExpression()); types <-+ "e";
    Consume("semicolon");

    return make Statement(returnkw->Value, args, types);
}

function Cur() Token { return Pek(0); }
function Pek(offset int) Token { return Tokens[Pointer + offset] }
function Skip() { while (~Cur()->Type = "whitespace" || ~Cur()->Type = "comment") { Step(1); } }
function Consume(name string) Token
{ 
    Skip();
    if (~Cur()->Type = name)
    {
        Step(1);
        return Pek(-1);
    }
    else
    {
        Print("[!] Exprected Token " + name + " but got: " + ~Cur()->Type + " [Line: " + string(GetLineNum(~Cur()->Pos)) + "]");
        die(0);
    }
    return Token(nil);
}