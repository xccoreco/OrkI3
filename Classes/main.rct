package sys; use sys;
package io;

#attach("./helpers.rct");
#attach("./keywords.rct");
#attach("./tokens.rct");
#attach("./statements.rct");
#attach("./expressions.rct");
#attach("./lexer.rct");
#attach("./parser.rct");

//copyFolder("C:\Users\djlw7\Desktop\OrkI3\Resources");
#copyFolder("/home/redcube/git/OrkI3/Resources");

Print("ORKI3 Interpreter --  written in ReCT  [ (c)2021 ProfessorDJ | BytespaceTK ]");

set Code <- io::ReadFile("./Resources/grammer.ork");

Lex();

Print(Char(10) + "Lexer Output:");

var longestkw <- LongestInList(GetTypes(Tokens));
var longestval <- LongestInList(GetValues(Tokens));
from (i <- 0) to Tokens->GetLength() -1
{
    if (~Tokens[i]->Type = "whitespace") continue;
    Write("[ Token: "); SetConsoleForeground(10);
    Write(~Tokens[i]->Type); SetConsoleForeground(15); Write(GenWhitespace(~~Tokens[i]->Type->GetLength(), longestkw));
    Write(", Value: "); SetConsoleForeground(12);
    Write(~~~Tokens[i]->Value->Replace(Char(10), "\n")->Replace(Char(13), "\r")); SetConsoleForeground(15);
    Write(GenWhitespace(~~Tokens[i]->Value->GetLength(), longestval));
    Print(" ]");
}

Parse();

Print(Char(10) + "Parser Output:");

from (i <- 0) to Statements->GetLength() - 1
    PrintStatement(Statements[i], "");

function PrintStatement(stmt Statement, off string)
{
    Write(off + "   └-> "); SetConsoleForeground(12);
    Print(stmt->Name); SetConsoleForeground(15);

    var offset <- off + "      ";

    var args <- stmt->Args;
    from (ii <- 0) to args->GetLength() - 1
    {
        try
        {
            var arg <- Token(args[ii]);
            Write(offset + "   └-> "); SetConsoleForeground(10);
            Write(arg->Type); SetConsoleForeground(15);
            Write(": "); SetConsoleForeground(3);
            Print(string(arg->Value)); SetConsoleForeground(15);
        }
        catch
        {
            var arg <- Statement(args[ii]);
            PrintStatement(arg, offset);
        }
    }
}